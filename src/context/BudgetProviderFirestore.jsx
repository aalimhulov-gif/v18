import React, { createContext, useContext, useState, useEffect } from 'react'
import { db } from '../firebase/firebaseConfig.js'
import { 
  collection, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  onSnapshot, 
  serverTimestamp,
  query,
  orderBy 
} from 'firebase/firestore'
import { useAuth } from '../firebase/auth.jsx'

const BudgetContext = createContext()

export function useBudget() {
  const context = useContext(BudgetContext)
  if (!context) {
    throw new Error('useBudget must be used within a BudgetProvider')
  }
  return context
}

export function BudgetProvider({ children }) {
  const { user } = useAuth()
  const [categories, setCategories] = useState([])
  const [operations, setOperations] = useState([])
  const [loading, setLoading] = useState(true)

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  const [theme, setTheme] = useState('dark')
  const [currency, setCurrency] = useState('RUB')

  // ID –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  const SHARED_BUDGET_ID = 'shared_budget_v1'

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ Firestore
  useEffect(() => {
    if (!user) {
      setCategories([])
      setOperations([])
      setLoading(false)
      return
    }

    console.log('üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ Firestore –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email)

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesRef = collection(db, 'budgets', SHARED_BUDGET_ID, 'categories')
    const categoriesQuery = query(categoriesRef, orderBy('createdAt', 'asc'))
    
    const unsubscribeCategories = onSnapshot(categoriesQuery, (snapshot) => {
      const categoriesData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))
      console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', categoriesData.length)
      setCategories(categoriesData)
    }, (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
    })

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationsRef = collection(db, 'budgets', SHARED_BUDGET_ID, 'operations')
    const operationsQuery = query(operationsRef, orderBy('createdAt', 'desc'))
    
    const unsubscribeOperations = onSnapshot(operationsQuery, (snapshot) => {
      const operationsData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))
      console.log('üí∞ –û–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', operationsData.length)
      setOperations(operationsData)
      setLoading(false)
    }, (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
      setLoading(false)
    })

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    return () => {
      console.log('üßπ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ Firestore')
      unsubscribeCategories()
      unsubscribeOperations()
    }
  }, [user])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const addCategory = async (categoryData) => {
    if (!user) return

    try {
      const categoriesRef = collection(db, 'budgets', SHARED_BUDGET_ID, 'categories')
      await addDoc(categoriesRef, {
        ...categoryData,
        createdAt: serverTimestamp(),
        createdBy: user.email
      })
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
      throw error
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const updateCategory = async (categoryId, updates) => {
    if (!user) return

    try {
      const categoryRef = doc(db, 'budgets', SHARED_BUDGET_ID, 'categories', categoryId)
      await updateDoc(categoryRef, {
        ...updates,
        updatedAt: serverTimestamp(),
        updatedBy: user.email
      })
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
      throw error
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const deleteCategory = async (categoryId) => {
    if (!user) return

    try {
      const categoryRef = doc(db, 'budgets', SHARED_BUDGET_ID, 'categories', categoryId)
      await deleteDoc(categoryRef)
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
      throw error
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const addOperation = async (operationData) => {
    if (!user) return

    try {
      const operationsRef = collection(db, 'budgets', SHARED_BUDGET_ID, 'operations')
      await addDoc(operationsRef, {
        ...operationData,
        amount: parseFloat(operationData.amount),
        createdAt: serverTimestamp(),
        createdBy: user.email,
        userEmail: user.email
      })
      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
      throw error
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const updateOperation = async (operationId, updates) => {
    if (!user) return

    try {
      const operationRef = doc(db, 'budgets', SHARED_BUDGET_ID, 'operations', operationId)
      await updateDoc(operationRef, {
        ...updates,
        amount: updates.amount ? parseFloat(updates.amount) : undefined,
        updatedAt: serverTimestamp(),
        updatedBy: user.email
      })
      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
      throw error
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const deleteOperation = async (operationId) => {
    if (!user) return

    try {
      const operationRef = doc(db, 'budgets', SHARED_BUDGET_ID, 'operations', operationId)
      await deleteDoc(operationRef)
      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
      throw error
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —Å—É–º–º
  const totals = {
    income: operations
      .filter(op => op.type === 'income')
      .reduce((sum, op) => sum + (op.amount || 0), 0),
    expense: operations
      .filter(op => op.type === 'expense')
      .reduce((sum, op) => sum + (op.amount || 0), 0)
  }
  totals.balance = totals.income - totals.expense

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç (–∑–∞–≥–ª—É—à–∫–∞)
  const convert = (amount, from = currency, to = currency) => {
    return amount // –ü–æ–∫–∞ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    setTheme(prev => prev === 'dark' ? 'light' : 'dark')
  }

  const value = {
    // –î–∞–Ω–Ω—ã–µ
    categories,
    operations,
    totals,
    loading,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    theme,
    currency,
    
    // –ú–µ—Ç–æ–¥—ã
    addCategory,
    updateCategory,
    deleteCategory,
    addOperation,
    updateOperation,
    deleteOperation,
    convert,
    toggleTheme,
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    budgetId: SHARED_BUDGET_ID,
    userEmail: user?.email
  }

  return (
    <BudgetContext.Provider value={value}>
      {children}
    </BudgetContext.Provider>
  )
}